{ config, lib, hostname, ... }: 
let
  hostsDir = ../../../hosts;

  hosts = lib.filter (host: host != hostname) (
    builtins.attrNames (
        lib.filterAttrs (_: type: type == "directory") (builtins.readDir hostsDir)
    )
  );

  homeFiles = lib.concatMap (host:
    let
      hostPath = "${hostsDir}/${host}";
      files = builtins.attrNames (
        lib.filterAttrs (_: type: type == "regular") (builtins.readDir hostPath)
      );
      pubFiles = lib.filter (f: lib.hasSuffix ".pub" f) files;
    in
      map (pub: {
        name = ".ssh/authorized_keys.d/${pub}";
        value = {
          source = "${hostPath}/${pub}";
        };
      }) pubFiles
  ) hosts;
in
{
  programs.ssh = {
    enable = true;
    addKeysToAgent = "yes";
    includes = [
      "~/.ssh/other_config"
    ];
  };

  # Since the host key is generated by the system, we need to
  # copy it to the user's home directory
  # The system will be single-user, so this is not a problem
  home.file = {
    ".ssh/ssh_host_ed25519_key" = {
        source = config.lib.file.mkOutOfStoreSymlink "/etc/ssh/ssh_host_ed25519_key";
    };
    ".ssh/ssh_host_ed25519_key.pub" = {
        source = config.lib.file.mkOutOfStoreSymlink "/etc/ssh/ssh_host_ed25519_key.pub";
    };
  } // lib.listToAttrs homeFiles;
}