{
  config,
  lib,
  hostname,
  ...
}:
let
  hostsDir = ../../../hosts;

  hosts = lib.filter (host: host != hostname) (
    builtins.attrNames (lib.filterAttrs (_: type: type == "directory") (builtins.readDir hostsDir))
  );

  publicKeyPaths = lib.concatMap (
    host:
    let
      hostPath = "${hostsDir}/${host}";
      files = builtins.attrNames (
        lib.filterAttrs (_: type: type == "regular") (builtins.readDir hostPath)
      );
      pubFiles = lib.filter (f: lib.hasPrefix "ssh_client_" f) files;
    in
    map (pub: "${hostPath}/${pub}") pubFiles
  ) hosts;

  authorizedKeys = builtins.concatStringsSep "\n" (map (path: builtins.readFile path) publicKeyPaths);
in
{
  programs.ssh = {
    enable = true;
    addKeysToAgent = "yes";
    matchBlocks = {
      "*" = {
        identityFile = "~/.ssh/ssh_client_ed25519_key";
      };
    };
    includes = [
      "~/.ssh/other_config"
    ];
  };

  # Since the host key is generated by the system, we need to
  # copy it to the user's home directory
  # The system will be single-user, so this is not a problem
  home.file = {
    ".ssh/authorized_keys" = {
      text = authorizedKeys;
    };
  };
}
